@addTagHelper *, FitMeApp
@model FitMeApp.WEB.Contracts.ViewModels.CalendarPageWithEventsViewModel
@* PartialView (main page - /Schedule/Index) *@

@{
    Layout = null;
}

<div class="container" style="width:100%;border:solid; border-color:lightgray">

    <div class="row">
        <div class="col-md-2" style="text-align:center">
            @{ int previousYear = Model.Date.Year - 1;
                DateTime carouselBackYear = new DateTime(previousYear, Model.Date.Month, 1);}
            <form asp-controller="Schedule" asp-action="CalendarCarousel">

                <input type="hidden" asp-for="Date" value="@carouselBackYear" />
                <input type="hidden" asp-for="DayOnCalendarSelected" value="@false" />
                
                @foreach (var item in Model.DatesEventsCount)
                {
                    <input type="hidden" asp-for="DatesEventsCount[item.Key]" value="@item.Value" />
                }
                <input type="submit" value="&#60" class="btn btn-light" />
            </form>
        </div>
        <div class="col-md-8" style="text-align:center">
            <div id="currentYear" style="font-size:medium">
                @Model.Date.Year
            </div>
        </div>
        <div class="col-md-2" style="text-align:center">
            @{ int nextYear = Model.Date.Year + 1;
                DateTime carouselForwardYear = new DateTime(nextYear, Model.Date.Month, 1);}
            <form asp-controller="Schedule" asp-action="CalendarCarousel">
                <input type="hidden" asp-for="Date" value="@carouselForwardYear" />  
                <input type="hidden" asp-for="DayOnCalendarSelected" value="@false" />
                @foreach (var item in Model.DatesEventsCount)
                {
                    <input type="hidden" asp-for="DatesEventsCount[item.Key]" value="@item.Value" />
                }
                <input type="submit" value="&#62" class="btn btn-light" />
            </form>
        </div>
    </div>
    <div class="row">
        <div class="col-md-2" style="text-align:center">
            @{
                int previousMonth = Model.Date.Month - 1;
                if (previousMonth <= 0)
                {
                    previousMonth = 12;
                    DateTime carouselBackMonth = new DateTime((Model.Date.Year - 1), previousMonth, 1);

                    <form asp-controller="Schedule" asp-action="CalendarCarousel">
                        <input type="hidden" asp-for="Date" value="@carouselBackMonth" />
                        <input type="hidden" asp-for="DayOnCalendarSelected" value="@false" />
                        @foreach (var item in Model.DatesEventsCount)
                        {
                            <input type="hidden" asp-for="DatesEventsCount[item.Key]" value="@item.Value" />
                        }
                        <input type="submit" value="&#60" class="btn btn-light" />
                    </form>
                }
                else
                {
                    DateTime carouselBackMonth = new DateTime(Model.Date.Year, previousMonth, 1);
                    <form asp-controller="Schedule" asp-action="CalendarCarousel">
                        <input type="hidden" asp-for="Date" value="@carouselBackMonth" />
                        <input type="hidden" asp-for="DayOnCalendarSelected" value="@false" />
                        @foreach (var item in Model.DatesEventsCount)
                        {
                            <input type="hidden" asp-for="DatesEventsCount[item.Key]" value="@item.Value" />
                        }
                        <input type="submit" value="&#60" class="btn btn-light" />
                    </form>
                };
            }

        </div>
        <div class="col-md-8" style="text-align:center">
            <div style="font-size:medium">
                @Model.MonthName
            </div>
        </div>
        <div class="col-md-2" style="text-align:center">
            @{
                int nextMonth = Model.Date.Month + 1;
                if (nextMonth > 12)
                {
                    nextMonth = 1;
                    DateTime carouselForwardMonth = new DateTime((Model.Date.Year + 1), nextMonth, 1);
                    <form asp-controller="Schedule" asp-action="CalendarCarousel">
                        <input type="hidden" asp-for="Date" value="@carouselForwardMonth" />
                        <input type="hidden" asp-for="DayOnCalendarSelected" value="@false" />
                        @foreach (var item in Model.DatesEventsCount)
                        {
                            <input type="hidden" asp-for="DatesEventsCount[item.Key]" value="@item.Value" />
                        }
                        <input type="submit" value="&#62" class="btn btn-light" />
                    </form>
                }
                else
                {
                    DateTime carouselForwardMonth = new DateTime(Model.Date.Year, nextMonth, 1);
                    <form asp-controller="Schedule" asp-action="CalendarCarousel">
                        <input type="hidden" asp-for="Date" value="@carouselForwardMonth" />
                        <input type="hidden" asp-for="DayOnCalendarSelected" value="@false" />
                        @foreach (var item in Model.DatesEventsCount)
                        {
                            <input type="hidden" asp-for="DatesEventsCount[item.Key]" value="@item.Value" />
                        }
                        <input type="submit" value="&#62" class="btn btn-light" />
                    </form>
                };
            }

        </div>
    </div>
    <div class="row">
        <table class="table-sm" style="text-align:center;font-size:small; width:100%">
            <thead>
                <tr>
                    @foreach (var dayName in ViewBag.DaysOfWeek)
                    {
                        <th scope="col" id="@dayName">@dayName</th>
                    }
                </tr>
            </thead>
            <tbody>
                @{string showEvents = "";
                    if (User.IsInRole("trainer"))
                    {
                        showEvents = "ShowTrainersEvents";
                    }
                    else
                    {
                        showEvents = "ShowUsersEvents";
                    }}
                <tr>
                    @{ int firstday = ((int)new DateTime(Model.Date.Year, Model.Date.Month, 1).DayOfWeek);
                        int daysInMonth = DateTime.DaysInMonth(Model.Date.Year, Model.Date.Month);
                        int date = 1;
                    }
                    @for (int i = 0; i < 7; i++)
                    {
                        if (firstday == i)
                        {
                            <td id="1_@i">
                                @await Component.InvokeAsync("DateOnCalendar", new { model = Model, dayNumber = date, showEventsActionName = showEvents })
                            </td>
                            ++date;

                            for (int j = i + 1; j < 7; j++)
                            {
                                <td id="1_@j">
                                    @await Component.InvokeAsync("DateOnCalendar", new { model = Model, dayNumber = date, showEventsActionName = showEvents })
                                </td>

                                ++date;
                            }
                            i = 7;
                        }
                        else
                        {
                            <td id="1_@i"></td>
                        }
                    }
                </tr>

                @for (int j = 2; j < 5; j++)
                {
                    <tr>
                        @for (int i = 0; i < 7; i++)
                        {
                            <td id="@(j)_@i">
                                @await Component.InvokeAsync("DateOnCalendar", new { model = Model, dayNumber = date, showEventsActionName = showEvents })
                            </td>
                            ++date;
                        }
                    </tr>
                }

                <tr>
                    @for (int i = 0; i < 7 && date <= daysInMonth; i++)
                    {
                        <td id="5_@i">
                            @await Component.InvokeAsync("DateOnCalendar", new { model = Model, dayNumber = date, showEventsActionName = showEvents })
                        </td>
                        ++date;
                    }
                </tr>
                <tr>
                    @for (int i = 0; date <= daysInMonth; i++)
                    {
                        <td id="6_@i">
                            @await Component.InvokeAsync("DateOnCalendar", new { model = Model, dayNumber = date, showEventsActionName = showEvents })
                        </td>
                        ++date;
                    }
                </tr>
            </tbody>
        </table>
    </div>
</div>







